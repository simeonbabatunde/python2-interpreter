Name: Simeon Babatunde

Course no: CpSc 8270

Clemson Email Address: sbabatu@g.clemson.edu

Project no: 4

Project due date: November 16, 2018

Project description:
This project focuses on building an Abstract Syntax Tree (AST) representation of the
language construct for expressions that appear in the global namespace of a python program
. The AST was designed to interpret the expressions. The Python 2.7.2 interpreter serves
as the ground truth for evaluating the accuracy of the AST output.


What I have accomplished to implement the Abstract Syntax Tree:
I ensured accurate precision format using <iomanip> for the floatLiterals by implementing a logic that tracks
the number of digits after the dot in a float number, with this, I was able to eliminate the FLOAT:
and INT: strings in the print statements.

I also implemented the TILDE unary operator (~) in addition to unary minus and plus. The ~
operator is implemented using Two's complement.

In addition to implementing the various forms of assignment, I also implemented the x*=y form.

The negative index for string was also implemented. For example print x[-1].

I implemented string concatenation, multiplication, indexing and slicing including formats
like x[:], x[1:], x[:5], etc.

I adopted Connor's test harness to verify the output of my program against Python 2.7

I updated both the scanner, parser other files in the include directory with necessary logic to
represent and interpret Python code.



The easiest part of this project:
Implementation of print and the basic expressions for int and float seems pretty easy. I was able
easily update the scanner with necessary logic to handle int number, float number, identifiers and
strings. The string concatenation and multiplication also appears to be easy.


Problems that I had in completing this project:
It took some time to fix all the warnings propagated in the parser. Also, I found the string
slicing a little challenging, especially the ones with negative start and stop index e.g.[-4:8].
Troubleshooting memory leaks takes a huge chunk of my time, even though I ensured that all pointers
were added to the pool of nodes. Floating point results in Python differs a little from c++ results,
I had to set the precision to 5 decimal_places in order to pass the test cases. Finally, tracing the
AST in the parser seems a little challenging as well


I'm taking a mulligan for negative index in string slicing e.g. x[-3:6]
