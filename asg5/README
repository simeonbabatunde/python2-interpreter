Name: Simeon Babatunde

Course no: CpSc 8270

Clemson Email Address: sbabatu@g.clemson.edu

Project no: 5

Project due date: December 7, 2018

Project description:
This project focuses on building an Abstract Syntax Tree (AST) representation of the
language construct for expressions that appear in the global namespace of a python program
. The AST was designed to interpret the expressions. The Python 2.7.2 interpreter serves
as the ground truth for evaluating the accuracy of the AST output.


What I have accomplished to implement the Abstract Syntax Tree:

I ensured that an exception is thrown whenever a local variable is referenced before
assignment, similar to how Python 2.7.x operates. Calling undefined function was also
handled as well.

The GRLT "<>" relational operator was also implemented in addition to other six major
relational operators.

String concatenation, multiplication, and indexing works perfectly as well as other
features implemented in project 3 and 4.

I ensured the results of my testcases were compared with Python 2.7.x output by
utilizing the test harness provided by Connor.






The easiest part of this project:
Implementation of print and the basic expressions for int and float seems pretty easy. I was able
easily update the scanner with necessary logic to handle int number, float number, identifiers and
strings. The string concatenation and multiplication also appears to be easy.


Problems that I had in completing this project:
It took some time to fix all the warnings propagated in the parser. Also, I found the string
slicing a little challenging, especially the ones with negative start and stop index e.g.[-4:8].
Troubleshooting memory leaks takes a huge chunk of my time, even though I ensured that all pointers
were added to the pool of nodes. Floating point results in Python differs a little from c++ results,
I had to set the precision to 5 decimal_places in order to pass the test cases. Finally, tracing the
AST in the parser seems a little challenging as well
