Name: Simeon Babatunde

Course no: CpSc 8270

Clemson Email Address: sbabatu@g.clemson.edu

Project no: 5

Project due date: December 7, 2018

Project description:
This project focuses on improving the Abstract Syntax Tree (AST) representation to handle
language construct like functions, if/elif/else, relational operators. The Python 2.7.2
interpreter serves as the ground truth for evaluating the accuracy of the AST output.


What I have accomplished to implement the Abstract Syntax Tree:
Python function translation was implemented, including scope resolution and return
value propagation which works satisfactorily with reference to Python 2.7.x

I ensured that an exception is thrown whenever a local variable is referenced before
assignment, similar to how Python 2.7.x operates. Calling undefined function was also
handled as well.

The GRLT "<>" relational operator was also implemented in addition to other six major
relational operators (<, >, <=, >=, ==, !=). And the relational operations works on
Integers, Floats and Strings just like Python 2.7.x

String concatenation, multiplication, and indexing works perfectly as well as other
features implemented in project 4.I ensured the results of my 38 testcases were compared
directly with Python 2.7.x output using the script for regression test (test harness)
provided by Connor. All test cases written for project 4 also ran successfully.

The If and IfElse conditions were implemented successfully while obeying Python scope
rules. RETURN statement was also implemented.


The easiest part of this project:
Identification of production rules for relops, if/elif/else and functions in parse.y
was easy to accomplish. Implementing the relational operators seems easy as well but
was laborious.

Problems that I had in completing this project:
It took a while to get the table manager to work. Also, considerable amount of time
was spent on getting the token warnings fixed. Returning True or False for comparison
results seems a little difficult to accomplish, I created StringLiteral for each of
them when needed. I found implementing return statement in If/else challenging. Finally
implementing ELIF was challenging as well.
